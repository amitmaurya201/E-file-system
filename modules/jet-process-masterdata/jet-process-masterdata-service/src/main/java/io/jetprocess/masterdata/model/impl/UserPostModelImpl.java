/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package io.jetprocess.masterdata.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import io.jetprocess.masterdata.model.UserPost;
import io.jetprocess.masterdata.model.UserPostModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserPost service. Represents a row in the &quot;Masterdata_UserPost&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserPostModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserPostImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserPostImpl
 * @generated
 */
@JSON(strict = true)
public class UserPostModelImpl
	extends BaseModelImpl<UserPost> implements UserPostModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user post model instance should use the <code>UserPost</code> interface instead.
	 */
	public static final String TABLE_NAME = "Masterdata_UserPost";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"userPostId", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"postId", Types.BIGINT},
		{"sectionId", Types.BIGINT}, {"description", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userPostId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Masterdata_UserPost (uuid_ VARCHAR(75) null,userPostId VARCHAR(75) not null primary key,groupId LONG,postId LONG,sectionId LONG,description LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Masterdata_UserPost";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userPost.userPostId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Masterdata_UserPost.userPostId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERPOSTID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public UserPostModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _userPostId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setUserPostId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userPostId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserPost.class;
	}

	@Override
	public String getModelClassName() {
		return UserPost.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserPost, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserPost, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserPost, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((UserPost)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserPost, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserPost, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserPost)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserPost, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserPost, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<UserPost, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserPost, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserPost, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UserPost, Object>>();
		Map<String, BiConsumer<UserPost, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserPost, ?>>();

		attributeGetterFunctions.put("uuid", UserPost::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<UserPost, String>)UserPost::setUuid);
		attributeGetterFunctions.put("userPostId", UserPost::getUserPostId);
		attributeSetterBiConsumers.put(
			"userPostId",
			(BiConsumer<UserPost, String>)UserPost::setUserPostId);
		attributeGetterFunctions.put("groupId", UserPost::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<UserPost, Long>)UserPost::setGroupId);
		attributeGetterFunctions.put("postId", UserPost::getPostId);
		attributeSetterBiConsumers.put(
			"postId", (BiConsumer<UserPost, Long>)UserPost::setPostId);
		attributeGetterFunctions.put("sectionId", UserPost::getSectionId);
		attributeSetterBiConsumers.put(
			"sectionId", (BiConsumer<UserPost, Long>)UserPost::setSectionId);
		attributeGetterFunctions.put("description", UserPost::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<UserPost, Long>)UserPost::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public String getUserPostId() {
		if (_userPostId == null) {
			return "";
		}
		else {
			return _userPostId;
		}
	}

	@Override
	public void setUserPostId(String userPostId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userPostId = userPostId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getPostId() {
		return _postId;
	}

	@Override
	public void setPostId(long postId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postId = postId;
	}

	@JSON
	@Override
	public long getSectionId() {
		return _sectionId;
	}

	@Override
	public void setSectionId(long sectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sectionId = sectionId;
	}

	@JSON
	@Override
	public long getDescription() {
		return _description;
	}

	@Override
	public void setDescription(long description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public UserPost toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserPost>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserPostImpl userPostImpl = new UserPostImpl();

		userPostImpl.setUuid(getUuid());
		userPostImpl.setUserPostId(getUserPostId());
		userPostImpl.setGroupId(getGroupId());
		userPostImpl.setPostId(getPostId());
		userPostImpl.setSectionId(getSectionId());
		userPostImpl.setDescription(getDescription());

		userPostImpl.resetOriginalValues();

		return userPostImpl;
	}

	@Override
	public UserPost cloneWithOriginalValues() {
		UserPostImpl userPostImpl = new UserPostImpl();

		userPostImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		userPostImpl.setUserPostId(
			this.<String>getColumnOriginalValue("userPostId"));
		userPostImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		userPostImpl.setPostId(this.<Long>getColumnOriginalValue("postId"));
		userPostImpl.setSectionId(
			this.<Long>getColumnOriginalValue("sectionId"));
		userPostImpl.setDescription(
			this.<Long>getColumnOriginalValue("description"));

		return userPostImpl;
	}

	@Override
	public int compareTo(UserPost userPost) {
		String primaryKey = userPost.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserPost)) {
			return false;
		}

		UserPost userPost = (UserPost)object;

		String primaryKey = userPost.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserPost> toCacheModel() {
		UserPostCacheModel userPostCacheModel = new UserPostCacheModel();

		userPostCacheModel.uuid = getUuid();

		String uuid = userPostCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userPostCacheModel.uuid = null;
		}

		userPostCacheModel.userPostId = getUserPostId();

		String userPostId = userPostCacheModel.userPostId;

		if ((userPostId != null) && (userPostId.length() == 0)) {
			userPostCacheModel.userPostId = null;
		}

		userPostCacheModel.groupId = getGroupId();

		userPostCacheModel.postId = getPostId();

		userPostCacheModel.sectionId = getSectionId();

		userPostCacheModel.description = getDescription();

		return userPostCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserPost, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserPost, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserPost, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((UserPost)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserPost, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserPost, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserPost, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserPost)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserPost>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					UserPost.class, ModelWrapper.class);

	}

	private String _uuid;
	private String _userPostId;
	private long _groupId;
	private long _postId;
	private long _sectionId;
	private long _description;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<UserPost, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UserPost)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("userPostId", _userPostId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("postId", _postId);
		_columnOriginalValues.put("sectionId", _sectionId);
		_columnOriginalValues.put("description", _description);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("userPostId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("postId", 8L);

		columnBitmasks.put("sectionId", 16L);

		columnBitmasks.put("description", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UserPost _escapedModel;

}