/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package io.jetprocess.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import io.jetprocess.model.ContactDetail;
import io.jetprocess.model.ContactDetailModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ContactDetail service. Represents a row in the &quot;JET_PROCESS_ContactDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ContactDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactDetailImpl
 * @generated
 */
@JSON(strict = true)
public class ContactDetailModelImpl
	extends BaseModelImpl<ContactDetail> implements ContactDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contact detail model instance should use the <code>ContactDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "JET_PROCESS_ContactDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"contactDetailId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"minDeptOth", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"designation", Types.VARCHAR}, {"mobile", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"country", Types.VARCHAR}, {"state_", Types.VARCHAR},
		{"district", Types.VARCHAR}, {"pinCode", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("minDeptOth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("district", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pinCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table JET_PROCESS_ContactDetail (uuid_ VARCHAR(75) null,contactDetailId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,minDeptOth VARCHAR(75) null,name VARCHAR(75) null,designation VARCHAR(75) null,mobile VARCHAR(75) null,email VARCHAR(75) null,address VARCHAR(75) null,country VARCHAR(75) null,state_ VARCHAR(75) null,district VARCHAR(75) null,pinCode VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table JET_PROCESS_ContactDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY contactDetail.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY JET_PROCESS_ContactDetail.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTACTDETAILID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ContactDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contactDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContactDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contactDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContactDetail.class;
	}

	@Override
	public String getModelClassName() {
		return ContactDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ContactDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ContactDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ContactDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ContactDetail, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ContactDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ContactDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ContactDetail, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ContactDetail, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ContactDetail, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ContactDetail, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ContactDetail, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ContactDetail, Object>>();
		Map<String, BiConsumer<ContactDetail, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ContactDetail, ?>>();

		attributeGetterFunctions.put("uuid", ContactDetail::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ContactDetail, String>)ContactDetail::setUuid);
		attributeGetterFunctions.put(
			"contactDetailId", ContactDetail::getContactDetailId);
		attributeSetterBiConsumers.put(
			"contactDetailId",
			(BiConsumer<ContactDetail, Long>)ContactDetail::setContactDetailId);
		attributeGetterFunctions.put("groupId", ContactDetail::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ContactDetail, Long>)ContactDetail::setGroupId);
		attributeGetterFunctions.put("companyId", ContactDetail::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ContactDetail, Long>)ContactDetail::setCompanyId);
		attributeGetterFunctions.put("userId", ContactDetail::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ContactDetail, Long>)ContactDetail::setUserId);
		attributeGetterFunctions.put("userName", ContactDetail::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ContactDetail, String>)ContactDetail::setUserName);
		attributeGetterFunctions.put(
			"createDate", ContactDetail::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ContactDetail, Date>)ContactDetail::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ContactDetail::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ContactDetail, Date>)ContactDetail::setModifiedDate);
		attributeGetterFunctions.put(
			"minDeptOth", ContactDetail::getMinDeptOth);
		attributeSetterBiConsumers.put(
			"minDeptOth",
			(BiConsumer<ContactDetail, String>)ContactDetail::setMinDeptOth);
		attributeGetterFunctions.put("name", ContactDetail::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<ContactDetail, String>)ContactDetail::setName);
		attributeGetterFunctions.put(
			"designation", ContactDetail::getDesignation);
		attributeSetterBiConsumers.put(
			"designation",
			(BiConsumer<ContactDetail, String>)ContactDetail::setDesignation);
		attributeGetterFunctions.put("mobile", ContactDetail::getMobile);
		attributeSetterBiConsumers.put(
			"mobile",
			(BiConsumer<ContactDetail, String>)ContactDetail::setMobile);
		attributeGetterFunctions.put("email", ContactDetail::getEmail);
		attributeSetterBiConsumers.put(
			"email",
			(BiConsumer<ContactDetail, String>)ContactDetail::setEmail);
		attributeGetterFunctions.put("address", ContactDetail::getAddress);
		attributeSetterBiConsumers.put(
			"address",
			(BiConsumer<ContactDetail, String>)ContactDetail::setAddress);
		attributeGetterFunctions.put("country", ContactDetail::getCountry);
		attributeSetterBiConsumers.put(
			"country",
			(BiConsumer<ContactDetail, String>)ContactDetail::setCountry);
		attributeGetterFunctions.put("state", ContactDetail::getState);
		attributeSetterBiConsumers.put(
			"state",
			(BiConsumer<ContactDetail, String>)ContactDetail::setState);
		attributeGetterFunctions.put("district", ContactDetail::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<ContactDetail, String>)ContactDetail::setDistrict);
		attributeGetterFunctions.put("pinCode", ContactDetail::getPinCode);
		attributeSetterBiConsumers.put(
			"pinCode",
			(BiConsumer<ContactDetail, String>)ContactDetail::setPinCode);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getContactDetailId() {
		return _contactDetailId;
	}

	@Override
	public void setContactDetailId(long contactDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactDetailId = contactDetailId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalContactDetailId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("contactDetailId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getMinDeptOth() {
		if (_minDeptOth == null) {
			return "";
		}
		else {
			return _minDeptOth;
		}
	}

	@Override
	public void setMinDeptOth(String minDeptOth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minDeptOth = minDeptOth;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designation = designation;
	}

	@JSON
	@Override
	public String getMobile() {
		if (_mobile == null) {
			return "";
		}
		else {
			return _mobile;
		}
	}

	@Override
	public void setMobile(String mobile) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobile = mobile;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getDistrict() {
		if (_district == null) {
			return "";
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public String getPinCode() {
		if (_pinCode == null) {
			return "";
		}
		else {
			return _pinCode;
		}
	}

	@Override
	public void setPinCode(String pinCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pinCode = pinCode;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ContactDetail.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ContactDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ContactDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactDetailImpl contactDetailImpl = new ContactDetailImpl();

		contactDetailImpl.setUuid(getUuid());
		contactDetailImpl.setContactDetailId(getContactDetailId());
		contactDetailImpl.setGroupId(getGroupId());
		contactDetailImpl.setCompanyId(getCompanyId());
		contactDetailImpl.setUserId(getUserId());
		contactDetailImpl.setUserName(getUserName());
		contactDetailImpl.setCreateDate(getCreateDate());
		contactDetailImpl.setModifiedDate(getModifiedDate());
		contactDetailImpl.setMinDeptOth(getMinDeptOth());
		contactDetailImpl.setName(getName());
		contactDetailImpl.setDesignation(getDesignation());
		contactDetailImpl.setMobile(getMobile());
		contactDetailImpl.setEmail(getEmail());
		contactDetailImpl.setAddress(getAddress());
		contactDetailImpl.setCountry(getCountry());
		contactDetailImpl.setState(getState());
		contactDetailImpl.setDistrict(getDistrict());
		contactDetailImpl.setPinCode(getPinCode());

		contactDetailImpl.resetOriginalValues();

		return contactDetailImpl;
	}

	@Override
	public ContactDetail cloneWithOriginalValues() {
		ContactDetailImpl contactDetailImpl = new ContactDetailImpl();

		contactDetailImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		contactDetailImpl.setContactDetailId(
			this.<Long>getColumnOriginalValue("contactDetailId"));
		contactDetailImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		contactDetailImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		contactDetailImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		contactDetailImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		contactDetailImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		contactDetailImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		contactDetailImpl.setMinDeptOth(
			this.<String>getColumnOriginalValue("minDeptOth"));
		contactDetailImpl.setName(this.<String>getColumnOriginalValue("name"));
		contactDetailImpl.setDesignation(
			this.<String>getColumnOriginalValue("designation"));
		contactDetailImpl.setMobile(
			this.<String>getColumnOriginalValue("mobile"));
		contactDetailImpl.setEmail(
			this.<String>getColumnOriginalValue("email"));
		contactDetailImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		contactDetailImpl.setCountry(
			this.<String>getColumnOriginalValue("country"));
		contactDetailImpl.setState(
			this.<String>getColumnOriginalValue("state_"));
		contactDetailImpl.setDistrict(
			this.<String>getColumnOriginalValue("district"));
		contactDetailImpl.setPinCode(
			this.<String>getColumnOriginalValue("pinCode"));

		return contactDetailImpl;
	}

	@Override
	public int compareTo(ContactDetail contactDetail) {
		int value = 0;

		value = getName().compareTo(contactDetail.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ContactDetail)) {
			return false;
		}

		ContactDetail contactDetail = (ContactDetail)object;

		long primaryKey = contactDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactDetail> toCacheModel() {
		ContactDetailCacheModel contactDetailCacheModel =
			new ContactDetailCacheModel();

		contactDetailCacheModel.uuid = getUuid();

		String uuid = contactDetailCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contactDetailCacheModel.uuid = null;
		}

		contactDetailCacheModel.contactDetailId = getContactDetailId();

		contactDetailCacheModel.groupId = getGroupId();

		contactDetailCacheModel.companyId = getCompanyId();

		contactDetailCacheModel.userId = getUserId();

		contactDetailCacheModel.userName = getUserName();

		String userName = contactDetailCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contactDetailCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contactDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			contactDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contactDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contactDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contactDetailCacheModel.minDeptOth = getMinDeptOth();

		String minDeptOth = contactDetailCacheModel.minDeptOth;

		if ((minDeptOth != null) && (minDeptOth.length() == 0)) {
			contactDetailCacheModel.minDeptOth = null;
		}

		contactDetailCacheModel.name = getName();

		String name = contactDetailCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			contactDetailCacheModel.name = null;
		}

		contactDetailCacheModel.designation = getDesignation();

		String designation = contactDetailCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			contactDetailCacheModel.designation = null;
		}

		contactDetailCacheModel.mobile = getMobile();

		String mobile = contactDetailCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			contactDetailCacheModel.mobile = null;
		}

		contactDetailCacheModel.email = getEmail();

		String email = contactDetailCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			contactDetailCacheModel.email = null;
		}

		contactDetailCacheModel.address = getAddress();

		String address = contactDetailCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			contactDetailCacheModel.address = null;
		}

		contactDetailCacheModel.country = getCountry();

		String country = contactDetailCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			contactDetailCacheModel.country = null;
		}

		contactDetailCacheModel.state = getState();

		String state = contactDetailCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			contactDetailCacheModel.state = null;
		}

		contactDetailCacheModel.district = getDistrict();

		String district = contactDetailCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			contactDetailCacheModel.district = null;
		}

		contactDetailCacheModel.pinCode = getPinCode();

		String pinCode = contactDetailCacheModel.pinCode;

		if ((pinCode != null) && (pinCode.length() == 0)) {
			contactDetailCacheModel.pinCode = null;
		}

		return contactDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ContactDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ContactDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ContactDetail)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ContactDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ContactDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ContactDetail)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ContactDetail>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ContactDetail.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _contactDetailId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _minDeptOth;
	private String _name;
	private String _designation;
	private String _mobile;
	private String _email;
	private String _address;
	private String _country;
	private String _state;
	private String _district;
	private String _pinCode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ContactDetail, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ContactDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("contactDetailId", _contactDetailId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("minDeptOth", _minDeptOth);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("designation", _designation);
		_columnOriginalValues.put("mobile", _mobile);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("country", _country);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("pinCode", _pinCode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("contactDetailId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("minDeptOth", 256L);

		columnBitmasks.put("name", 512L);

		columnBitmasks.put("designation", 1024L);

		columnBitmasks.put("mobile", 2048L);

		columnBitmasks.put("email", 4096L);

		columnBitmasks.put("address", 8192L);

		columnBitmasks.put("country", 16384L);

		columnBitmasks.put("state_", 32768L);

		columnBitmasks.put("district", 65536L);

		columnBitmasks.put("pinCode", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ContactDetail _escapedModel;

}